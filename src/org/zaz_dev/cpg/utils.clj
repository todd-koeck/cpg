(ns org.zaz-dev.cpg.utils
  (:gen-class))

(def default-num-threads 20)
(defonce ans (atom nil))
(def max-queue-length 4)
(def default-timeout 500)
(def cnt (atom 0))

(def bad-pwd
  "This is used to test decryption of a rar file to attempt to determine
  if the file actually has a password set on it.  It is intended to be a
  password that won't work, however it is possible the someone might
  actually chose this password."
  " -BAD PASSWORD- ")


(defn getcwd []  (System/getProperty "user.dir"))

(defn exec-prog
  "Exectutes a program given a sequence.  The first
  element should be the program.  The remaining elements
  are passed as arguments to the program.

  The return value is the java.lang.Process object returned
  by calling java.lang.Runtime.getRuntime().exec()."
  [cmd-seq]
  (.exec (Runtime/getRuntime) (into-array ^String cmd-seq)))

(defn lines
  "Given an InputStream, read it fully, storing the
  lines into a sequence."
  [input-stream]
  (-> input-stream
      java.io.InputStreamReader.
      java.io.BufferedReader.
      line-seq))


(defn proc-result
  "Given a process, returns a map containing :exit-value,
  :stdout and :stderr.  The :stdout and :stderr are collections
  of the lines of output generated by the process.

  This function waits for the process to terminate.  It then
  destroys the process."
  [proc]
  (.close (.getOutputStream proc))
  (.waitFor proc)
  (zipmap [:exit-value :stdout :stderr]
          [(.exitValue proc)
           (lines (.getInputStream proc))
           (lines (.getErrorStream proc))]))

(defn run-rar
  "Returns a map containing :exit-value (int), :stdout (a sequnce
  strings the program wrote to stdout) and :stderr (another
  sequence of strings).

  When called with rarfname, it returns the results of running
  rar with the lb option.  If that succeeded, (:exit-value
  is zero) :stdout will contain a list of filenames in the
  archive.

  When falled with rarfname, password and fname, it returns the
  results of running rar testing the named file in the archive."
  ([rarfname]
   (proc-result (exec-prog ["rar" "lb" rarfname])))
  ([rarfname password] (run-rar rarfname password nil))
  ([rarfname password fname]
   (if fname
     (proc-result (exec-prog ["7z" "t" (str "-p" password) rarfname fname])) ;; Used to call rar, test with 7z to see if it's faster.
     (proc-result (exec-prog ["rar" "lb" (str "-p" password) rarfname])))))

;; Testing showed that rar files come in several different
;; forms.  The can either be "RAR 4" or "RAR 5" type and
;; the headers can either be encrypted or not for both types.
;;
;; I don't think the RAR version matters, but rafiles with
;; unencrypted headers will return a 0(zero) exit code if you
;; call "rar l" on the rarfile.  Testing for a correct password
;; on these files requires either extracting or testing the
;; contents of the rarfile.  Testing only the first file will
;; be more efficient than testing all of the contents.
;;
;; For the listing to succeed on a rarfile with encrypted
;; headers, you need a password.  It is sufficient to attempt
;; to get a listing of the rarfile contents to test for the
;; password.  This test is much quicker than a test, especially
;; for large rarfiles.
;;
(defn check-rarfile
  "If possible, returns the name of the first file in the
  rar archive.  If nil is returned, it's very likely that
  the headers for the rar archive are encrypted."
  [rarfname]
  (let [res (run-rar rarfname)
        f (first (:stdout res))]
    (if (= (:exit-value res) 0)
      (do ; Unencrypted headers, check for unencrypted file.
        (let [res2 (run-rar rarfname bad-pwd f)]
          (if (= (:exit-value res2) 0)
            (println "File '" rarfname "' isn't encrypted or the password is '" bad-pwd "'")
            (do
              (println "Unencrypted headers, first file: '" f "'")
              f))))
      (println "Header files are encrypted."))))

(defn lazy-seq? [v] (= (type v) clojure.lang.LazySeq))
(defn now []  (System/currentTimeMillis))

(defn file-load-lines
  [fname]
  (-> (java.io.FileInputStream. fname)
      lines))
